name: basic - workflow

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  workflow_dispatch:

  merge_group:

permissions:
  contents: read
  id-token: write # need this for federated login

jobs:
  calculate:
    runs-on: ubuntu-latest
    outputs:
      jobs: ${{ steps.check_artifacts.outputs.jobs }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history for all branches and tags (may not be needed if using PR API for changed files)

      - name: Show event info
        run: |
          echo '${{ toJson(github)}}'

      - name: Get ref for cache
        id: get_ref
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            console.log(JSON.stringify(context, null, 2))

            // TODO - tidy this up, make more robust (e.g. parsing ref)

            const eventName = context.eventName;
            switch(eventName) {
              case 'pull_request':
                console.log("PR event");
                console.log(`Using ref: ${context.payload.pull_request.base.ref}`);
                return context.payload.pull_request.base.ref
              
              case "push":
                return context.payload.ref.split("/")[2];

              case "merge_group":
                return context.payload.merge_group.base_ref.split("/")[2];
                break;

              case "workflow_dispatch":
                return context.payload.ref.split("/")[2];

              default:
                core.setFailed(`Unhandled event type: ${eventName}`)
                break;
            }

      # Initially used the actions/cache action to cache the hash files
      # This doesn't provide an output that indicates which cache key was used for the restore
      # so switched to separate actions/cache/restor and actions/cache/save steps
      # If https://github.com/actions/cache/pull/1604 is merged then we can switch back to using actions/cache
      - name: Load hash cache
        id: load_hash_cache
        uses: actions/cache/restore@v4
        # uses: stuartleeks/actions-cache@add-restore-outputs-to-core
        with:
          path: .hashes
          # Use the commit SHA as a suffix in the cache key to ensure that the cache is unique to this commit.
          # Use restore key without the SHA in restore keys to allow for restoring the cache from another branch.
          # Restore key usage may retrieve a cache that doesn't fully match the current commit but the
          # path filter should ensure that we only use cached hashes that are relevant to the current commit
          #
          # Docs: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
          #
          # Include event name as it's useful when debugging where the cache came from
          key: hash-cache-${{ steps.get_ref.outputs.result }}-${{ github.sha }}-${{ github.event_name}}
          restore-keys: |
            hash-cache-${{ steps.get_ref.outputs.result }}-${{ github.sha }}
            hash-cache-${{ steps.get_ref.outputs.result }}

      - name: output cache info
        run: |
          echo "## Hash cache info" >> $GITHUB_STEP_SUMMARY
          echo "Requested key:  ${{ steps.load_hash_cache.outputs.cache-primary-key }}" >> $GITHUB_STEP_SUMMARY
          echo "Matched key:    ${{ steps.load_hash_cache.outputs.cache-matched-key }}" >> $GITHUB_STEP_SUMMARY

      - name: Azure login with federated credentials
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          allow-no-subscriptions: true

      - name: Check for artifacts
        id: check_artifacts
        uses: ./.github/actions/check_artifacts
        with:
          filter-file: ./scripts/example-filter.yaml
          workflow-file: .github/workflows/basic.yml
          storage-account: ${{ vars.AZURE_STORAGE_ACCOUNT }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          container: artifacts # ensure this exists
          base-ref: origin/${{ steps.get_ref.outputs.result }}

      - name: examine hash cache files
        run: |
          ls -al .hashes
      
      - name: Save hash cache
        id: save_hash_cache
        uses: actions/cache/save@v4
        with:
          path: .hashes
          key: hash-cache-${{ steps.get_ref.outputs.result }}-${{ github.sha }}-${{ github.event_name }}
        
  build-common:
    runs-on: ubuntu-latest
    needs: calculate
    if:  ${{ !failure() && !fromJson(needs.calculate.outputs.jobs).build-common.artifact_exists }}
    env:
      KEY_COMMON_BUILD: ${{ fromJson(needs.calculate.outputs.jobs).build-common.artifact_key }}
    steps:
      - uses: actions/checkout@v4

      - name: Build
        run: |
          echo "Pretending to build... $KEY_COMMON_BUILD"
          sleep 5
          echo "common built for $KEY_COMMON_BUILD" > build_common.txt
          echo "Pretending to build... done"
          echo '... ${{ needs.calculate.outputs.jobs}}'
          echo '... ${{ fromJson(needs.calculate.outputs.jobs).build-common.artifact_exists }}'
      
      - name: Azure login with federated credentials
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          allow-no-subscriptions: true

      - name: upload artifacts
        uses: ./.github/actions/upload_artifacts
        with:
          azure-tenant-id: ${{ vars.AZURE_TENANT_ID }}
          storage-account: ${{ vars.AZURE_STORAGE_ACCOUNT }}
          container: artifacts # ensure this exists
          key: ${{ fromJson(needs.calculate.outputs.jobs).build-common.artifact_key }}
          path: |
            build_common.txt
            README.md

  build:
    runs-on: ubuntu-latest
    needs:
      - calculate
      - build-common
    if:  ${{ (!failure() && !fromJson(needs.calculate.outputs.jobs).build.artifact_exists) || needs.build-common.result == 'success' }}
    env:
      KEY_BUILD: ${{ fromJson(needs.calculate.outputs.jobs).build.artifact_key }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure login with federated credentials
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          allow-no-subscriptions: true

      - name: download artifacts
        uses: ./.github/actions/download_artifacts
        with:
          azure-tenant-id: ${{ vars.AZURE_TENANT_ID }}
          storage-account: ${{ vars.AZURE_STORAGE_ACCOUNT }}
          container: artifacts # ensure this exists
          key: ${{ fromJson(needs.calculate.outputs.jobs).build-common.artifact_key }}
          path: ./common_build_output/

      - name: Build
        run: |
          echo "Pretending to build... $KEY_BUILD"
          echo "build_common.txt:"
          cat ./common_build_output/build_common.txt
          echo "===================="
          sleep 5
          echo "common built for $KEY_BUILD" > build.txt
          echo "Inputs:" >> build.txt
          cat  ./common_build_output/build_common.txt >> build.txt
          echo "Pretending to build... done"
      
      - name: upload artifacts
        uses: ./.github/actions/upload_artifacts
        with:
          azure-tenant-id: ${{ vars.AZURE_TENANT_ID }}
          storage-account: ${{ vars.AZURE_STORAGE_ACCOUNT }}
          container: artifacts # ensure this exists
          key: ${{ fromJson(needs.calculate.outputs.jobs).build.artifact_key }}
          path: |
            build.txt

  test-common:
    runs-on: ubuntu-latest
    needs:
      - calculate
      - build-common
    if:  ${{ (!failure() && !fromJson(needs.calculate.outputs.jobs).test-common.artifact_exists) || needs.build-common.result == 'success' }}
    env:
      KEY_COMMON_TEST: ${{ fromJson(needs.calculate.outputs.jobs).test-common.artifact_key }}
    steps:
      - uses: actions/checkout@v4

      - name: Test
        run: |
          echo "key_common_build: ${{ fromJson(needs.calculate.outputs.jobs).build.artifact_key }}"
          echo "key_common_test: ${{ fromJson(needs.calculate.outputs.jobs).test-common.artifact_key }}"


      - name: Azure login with federated credentials
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
      - name: download artifacts
        uses: ./.github/actions/download_artifacts
        with:
          azure-tenant-id: ${{ vars.AZURE_TENANT_ID }}
          storage-account: ${{ vars.AZURE_STORAGE_ACCOUNT }}
          container: artifacts # ensure this exists
          key: ${{ fromJson(needs.calculate.outputs.jobs).build-common.artifact_key }}
          path: ./common_build_output/
      
      - name: Test
        run: |
          echo "Pretending to test... $KEY_COMMON_TEST"
          echo "build_common.txt:"
          cat ./common_build_output/build_common.txt
          echo "===================="
          sleep 5
          echo "common tested for $KEY_COMMON_TEST" > test_common.txt
          echo "Inputs:" >> test_common.txt
          cat  ./common_build_output/build_common.txt >> test_common.txt
          echo "Pretending to test... done"

      - name: upload artifacts
        uses: ./.github/actions/upload_artifacts
        with:
          azure-tenant-id: ${{ vars.AZURE_TENANT_ID }}
          storage-account: ${{ vars.AZURE_STORAGE_ACCOUNT }}
          container: artifacts # ensure this exists
          key: ${{ fromJson(needs.calculate.outputs.jobs).test-common.artifact_key }}
          path: |
            test_common.txt

  test:
    runs-on: ubuntu-latest
    needs:
      - calculate
      - build
    if:  ${{ (!failure() && !fromJson(needs.calculate.outputs.jobs).test.artifact_exists) || needs.build.result == 'success' }}
    env:
      KEY_COMMON_TEST: ${{ fromJson(needs.calculate.outputs.jobs).test.artifact_key }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure login with federated credentials
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          allow-no-subscriptions: true

      # TODO - explore downloading artifacts from multiple sources in parallel
      - name: download artifacts (common_src_build)
        uses: ./.github/actions/download_artifacts
        with:
          azure-tenant-id: ${{ vars.AZURE_TENANT_ID }}
          storage-account: ${{ vars.AZURE_STORAGE_ACCOUNT }}
          container: artifacts # ensure this exists
          key: ${{ fromJson(needs.calculate.outputs.jobs).build-common.artifact_key }}
          path: ./common_build_output/

      - name: download artifacts (src_build)
        uses: ./.github/actions/download_artifacts
        with:
          azure-tenant-id: ${{ vars.AZURE_TENANT_ID }}
          storage-account: ${{ vars.AZURE_STORAGE_ACCOUNT }}
          container: artifacts # ensure this exists
          key: ${{ fromJson(needs.calculate.outputs.jobs).build.artifact_key }}
          path: ./build_output/
        
      - name: Test
        run: |
          echo "Pretending to test... $KEY_COMMON_TEST"
          echo "build_common.txt:"
          cat ./common_build_output/build_common.txt
          echo "build.txt:"
          cat ./build_output/build.txt
          echo "===================="
          sleep 5
          echo "common tested for $KEY_COMMON_TEST" > test.txt
          echo "Inputs:" >> test.txt
          cat  ./common_build_output/build_common.txt >> test.txt
          cat  ./build_output/build.txt >> test.txt
          echo "Pretending to test... done"

      - name: upload artifacts
        uses: ./.github/actions/upload_artifacts
        with:
          azure-tenant-id: ${{ vars.AZURE_TENANT_ID }}
          storage-account: ${{ vars.AZURE_STORAGE_ACCOUNT }}
          container: artifacts # ensure this exists
          key: ${{ fromJson(needs.calculate.outputs.jobs).test.artifact_key }}
          path: |
            test.txt
