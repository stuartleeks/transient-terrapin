name: basic

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  workflow_dispatch:

  merge_group:

jobs:
  calculate:
    runs-on: ubuntu-latest
    outputs:
      filter_src: ${{ steps.filter.outputs.filter_src }}
      filter_test: ${{ steps.filter.outputs.filter_test }}
      filter_common: ${{ steps.filter.outputs.filter_common }}
      filter_common_src: ${{ steps.filter.outputs.filter_common_src }}
      filter_common_test: ${{ steps.filter.outputs.filter_common_test }}
      hash_src: ${{ steps.calculate_hashes.outputs.hash_src }}
      hash_test: ${{ steps.calculate_hashes.outputs.hash_test }}
      hash_common: ${{ steps.calculate_hashes.outputs.hash_common }}
      hash_common_src: ${{ steps.calculate_hashes.outputs.hash_common_src }}
      hash_common_test: ${{ steps.calculate_hashes.outputs.hash_common_test }}
      ###############################
      artifact_result_key: ${{ steps.check_artifacts.outputs.artifact_result_key }}
      ###############################
      # TODO - is there a way to expose these results without having to list each one here?
      artifact_exists_common_build: ${{ steps.check_artifacts.outputs.artifact_exists_common_build }}
      artifact_fingerprint_common_build: ${{ steps.check_artifacts.outputs.artifact_fingerprint_common_build }}
      artifact_exists_common_test: ${{ steps.check_artifacts.outputs.artifact_exists_common_test }}
      artifact_fingerprint_common_test: ${{ steps.check_artifacts.outputs.artifact_fingerprint_common_test }}
      #################
      artifact_exists: ${{ steps.check_artifacts.outputs.exists }}
      artifact_fingerprint: ${{ steps.check_artifacts.outputs.fingerprint }}

    steps:
      - uses: actions/checkout@v4
        # if the checkout script/tool is baked into the base runner image, this step can be skipped as it uses the API to get changes
        # NOTE - that _may_ not be true for the merge group event, need to investigate
        with:
          fetch-depth: 0 # fetch all history for all branches and tags

      - name: Load hash cache
        id: load_hash_cache
        uses: actions/cache@v3
        with:
          path: .hashes
          # build hash key with the target branch name, commit SHA, and run ID to generate a unique cache key
          # TODO - think about the key so that main build is found in preference to other PR build
          key: hash-cache-${{ github.ref }}-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt}}
          # use restore keys to restore the cache if the exact key is not found
          # the path filter should ensure that we only use cached hashes that are relevant to the current commit
          restore-keys: |
            hash-cache-${{ github.ref }}-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}
            hash-cache-${{ github.ref }}-${{ github.sha }}-${{ github.run_id }}
            hash-cache-${{ github.ref }}-${{ github.sha }}
            hash-cache-${{ github.ref }}

      - name: run path filter
        id: filter
        # Run through the filters in the specified file.
        # For each filter, evaluate the condition and output to step outputs and GITHUB_ENV
        run: python ./scripts/process_path_filter.py
        env:
          # FILTER_FILE: determines which filter file to process
          FILTER_FILE: ./scripts/filter-example.yaml
          # GITHUB_TOKEN: used to authenticate with the GitHub API to get the list of changed files
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Show filter results
        # note that we don't need to set env vars here as they are set by the process_path_filter.py script
        run: |
          printenv | sort

      - name: Calculate hashes
        id: calculate_hashes
        env:
          FILTER_FILE: ./scripts/filter-example.yaml
        run: |
            python ./scripts/calculate_hashes.py

      # TODO - check out ncc or similar to avoid npm install step: https://docs.github.com/en/actions/sharing-automations/creating-actions/creating-a-javascript-action#commit-tag-and-push-your-action

      - name: Check for artifacts - npm install
        run: |
          cd .github/actions/check_artifacts
          npm install
      
      - name: Check for artifacts
        id: check_artifacts
        uses: ./.github/actions/check_artifacts
        with:
          artifacts-file: ./scripts/example-artifacts.yaml


      - name: temp
        run: |
          echo "test: ${{ steps.check_artifacts.outputs.test }}"
          echo "===================="
          echo "test.a: ${{ steps.check_artifacts.outputs.test.a }}"
          echo "===================="
          echo 'fingerprint JSON: ${{ steps.check_artifacts.outputs.fingerprint }}'
          echo "===================="
          echo "common_build..."
          echo 'fingerprint: ${{ fromJson(steps.check_artifacts.outputs.fingerprint).common_build }}'
          echo 'fingerprint: ${{ fromJson(steps.check_artifacts.outputs.fingerprint)['common_build'] }}'
          echo 'exists: ${{ fromJson(steps.check_artifacts.outputs.exists).common_build }}'
          echo "===================="
          echo "common_test..."
          echo 'fingerprint: ${{ fromJson(steps.check_artifacts.outputs.fingerprint).common_test }}'
          echo 'exists: ${{ fromJson(steps.check_artifacts.outputs.exists).common_test }}'
          echo "===================="
          echo 'artifact_result_key: ${{ steps.check_artifacts.outputs.artifact_result_key }}'
          echo "===================="
          echo 'artifact_exists_common_build: ${{ steps.check_artifacts.outputs.artifact_exists_common_build }}'
          echo 'artifact_fingerprint_common_build: ${{ steps.check_artifacts.outputs.artifact_fingerprint_common_build }}'
          echo 'artifact_exists_common_test: ${{ steps.check_artifacts.outputs.artifact_exists_common_test }}'
          echo 'artifact_fingerprint_common_test: ${{ steps.check_artifacts.outputs.artifact_fingerprint_common_test }}'
          echo "===================="
          
  build-common:
    runs-on: ubuntu-latest
    needs: calculate
    if:  ${{ needs.calculate.outputs.artifact_exists_common_build != 'true' }}
    env:
      FINGERPRINT_COMMON_BUILD: ${{ needs.calculate.outputs.artifact_fingerprint_common_build }}
    steps:
      - name: Build
        run: |
          echo "Pretending to build... $FINGERPRINT_COMMON_BUILD"
          sleep 5
          echo "common built for $FINGERPRINT_COMMON_BUILD" > build_common.txt
          echo "Pretending to build... done"
          echo ... ${{ needs.calculate.outputs.artifact_exists}}''
          echo ... ${{ fromJson(needs.calculate.outputs.artifact_exists).common_build }}''

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.calculate.outputs.artifact_fingerprint_common_build }}
          path: build_common.txt
          retention-days: 3

  test-common:
    runs-on: ubuntu-latest
    needs: [calculate, build-common]
    if:  ${{ needs.calculate.outputs.artifact_exists_common_test != 'true' }}
    env:
      FINGERPRINT_COMMON_TEST: ${{ needs.calculate.outputs.artifact_fingerprint_common_test }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.calculate.outputs.artifact_fingerprint_common_build }}
          path: .
      
      - name: temp
        run: |
          ls -la
      
      - name: Test
        run: |
          echo "Pretending to test... $FINGERPRINT_COMMON_TEST"
          sleep 5
          echo "common tested for $FINGERPRINT_COMMON_TEST" > test_common.txt
          echo "Inputs:" >> test_common.txt
          cat  build_common.txt >> test_common.txt
          echo "Pretending to test... done"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.calculate.outputs.artifact_fingerprint_common_test }}
          path: test_common.txt
          retention-days: 3

  final:
    runs-on: ubuntu-latest
    needs: [calculate, build-common, test-common]
    if: ${{ always() }}
    env:
      FILTER_SRC: ${{ needs.calculate.outputs.filter_src }}
      FILTER_TEST: ${{ needs.calculate.outputs.filter_test }}
      FILTER_COMMON: ${{ needs.calculate.outputs.filter_common }}
      FILTER_COMMON_SRC: ${{ needs.calculate.outputs.filter_common_src }}
      FILTER_COMMON_TEST: ${{ needs.calculate.outputs.filter_common_test }}
      HASH_SRC: ${{ needs.calculate.outputs.hash_src }}
      HASH_TEST: ${{ needs.calculate.outputs.hash_test }}
      HASH_COMMON: ${{ needs.calculate.outputs.hash_common }}
      HASH_COMMON_SRC: ${{ needs.calculate.outputs.hash_common_src }}
      HASH_COMMON_TEST: ${{ needs.calculate.outputs.hash_common_test }}
    steps:
      - name: Show vars
        run: |
          printenv | sort
