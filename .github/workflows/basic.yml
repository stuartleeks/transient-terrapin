name: basic

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  workflow_dispatch:

  merge_group:

jobs:
  calculate:
    runs-on: ubuntu-latest
    outputs:
      filter_src: ${{ steps.filter.outputs.filter_src }}
      filter_test: ${{ steps.filter.outputs.filter_test }}
      filter_common: ${{ steps.filter.outputs.filter_common }}
      filter_common_src: ${{ steps.filter.outputs.filter_common_src }}
      filter_common_test: ${{ steps.filter.outputs.filter_common_test }}
      hash_src: ${{ steps.calculate_hashes.outputs.hash_src }}
      hash_test: ${{ steps.calculate_hashes.outputs.hash_test }}
      hash_common: ${{ steps.calculate_hashes.outputs.hash_common }}
      hash_common_src: ${{ steps.calculate_hashes.outputs.hash_common_src }}
      hash_common_test: ${{ steps.calculate_hashes.outputs.hash_common_test }}

    steps:
      - uses: actions/checkout@v4
        # if the checkout script/tool is baked into the base runner image, this step can be skipped as it uses the API to get changes
        # NOTE - that _may_ not be true for the merge group event, need to investigate
        with:
          fetch-depth: 0 # fetch all history for all branches and tags

      - name: Load hash cache
        id: load_hash_cache
        uses: actions/cache@v3
        with:
          path: .hashes
          # build hash key with the target branch name, commit SHA, and run ID to generate a unique cache key
          # TODO - think about the key so that main build is found in preference to other PR build
          key: hash-cache-${{ github.ref }}-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt}}
          # use restore keys to restore the cache if the exact key is not found
          # the path filter should ensure that we only use cached hashes that are relevant to the current commit
          restore-keys: |
            hash-cache-${{ github.ref }}-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}
            hash-cache-${{ github.ref }}-${{ github.sha }}-${{ github.run_id }}
            hash-cache-${{ github.ref }}-${{ github.sha }}
            hash-cache-${{ github.ref }}

      - name: run path filter
        id: filter
        run: python ./scripts/process_path_filter.py
        env:
          # FILTER_FILE: determines which filter file to process
          FILTER_FILE: ./scripts/filter-example.yaml
          # GITHUB_TOKEN: used to authenticate with the GitHub API to get the list of changed files
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Show filter results
        run: |
          printenv | sort
        # The env section below isn't needed as the filter step outputs to GITHUB_ENV
        # env:
        #   FILTER_COMMON: ${{ steps.filter.outputs.filter_common }}
        #   FILTER_COMMON_SRC: ${{ steps.filter.outputs.filter_common_src }}
        #   FILTER_COMMON_TEST: ${{ steps.filter.outputs.filter_common_test }}
        #   FILTER_SRC: ${{ steps.filter.outputs.filter_src }}
        #   FILTER_TEST: ${{ steps.filter.outputs.filter_test }}

      - name: Calculate hashes
        id: calculate_hashes
        env:
          FILTER_FILE: ./scripts/filter-example.yaml
        run: |
            python ./scripts/calculate_hashes.py

      # TODO - add step to check if artifacts exist and if not update the filter values

  build-common:
    runs-on: ubuntu-latest
    needs: calculate
    if:  ${{ needs.calculate.outputs.filter_common_src == 'true' }}
    env:
      HASH_COMMON_SRC: ${{ needs.calculate.outputs.hash_common_src }}
    steps:
      - name: Build
        run: |
          echo "Pretending to build... $HASH_COMMON_SRC"
          sleep 5
          echo "common_src built for $HASH_COMMON_SRC" > /tmp/build_common_src.txt
          echo "Pretending to build... done"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-common-src-${{ needs.calculate.outputs.hash_common_src }}
          retention-days: 3


  final:
    runs-on: ubuntu-latest
    needs: [calculate, build-common]
    if: ${{ always() }}
    env:
      FILTER_SRC: ${{ needs.calculate.outputs.filter_src }}
      FILTER_TEST: ${{ needs.calculate.outputs.filter_test }}
      FILTER_COMMON: ${{ needs.calculate.outputs.filter_common }}
      FILTER_COMMON_SRC: ${{ needs.calculate.outputs.filter_common_src }}
      FILTER_COMMON_TEST: ${{ needs.calculate.outputs.filter_common_test }}
      HASH_SRC: ${{ needs.calculate.outputs.hash_src }}
      HASH_TEST: ${{ needs.calculate.outputs.hash_test }}
      HASH_COMMON: ${{ needs.calculate.outputs.hash_common }}
      HASH_COMMON_SRC: ${{ needs.calculate.outputs.hash_common_src }}
      HASH_COMMON_TEST: ${{ needs.calculate.outputs.hash_common_test }}
    steps:
      - name: Show vars
        run: |
          printenv | sort
